{
  "title": "Software Engineering Interview Preparation",
  "body": {
    "intro1": "As the software industry keeps getting larger and larger, the number of software engineering positions available out there keeps increasing. But that doesn't mean getting a job in the industry is a piece of cake. Yes, you'll find more job openings here compared to other fields, but the competition is also tough. So, you really need to gear up and polish your skills to stand out and land that dream job.",
    "intro2": "Here, I will be giving you general information and some tips on the interview preparation process from building your resume all the way to taking the actual interview.",
    "introBulletsIntro": "The main sections will be:",
    "introBullet1": "Resume Building",
    "introBullet2": "Coding Questions",
    "introBullet3": "Interview Structure and Practice",
    "introBullet4": "Job Hunting / Job Application",

    "resumeBuildingSubtitle": "Resume Building",
    "resumeBuilding1": "Now, let’s talk about how to get ready for that interview. First up, your resume. This is your first step into the door of opportunity. But if it's not as good, you'll get kicked out of that door faster than you can say \"hire me.\" Even if you've got top-notch coding skills or a pro at interviews, you won't even get the chance to show off your skills if your resume is a flop. So take the time to build a killer resume and make sure to get feedback from multiple people so you can keep improving it.",
    "resumeBuilding2": "First of all, when you're putting together your resume, aim to keep it to one page. This means you gotta keep your bullet points short and sweet, and make sure you highlight the important points that's most relevant to the job you're applying for. You could also have a few different versions of your resume with different experiences and projects that fit the position you're going for. ",
    "resumeBuilding3": "Secondly, it’s important to choose your words carefully. Do some research and check out other resumes in your field. See what words they use for different situations. For instance, instead of saying “Worked on…” you could say “managed this”, “built that”, or “improved this aspect of the job/project”, and stuff like that. Using phrases like these will make your resume look better overall. Nowadays, companies get tons of resumes for one job, and they don't have time to go through them one by one. They'll use software to scan your resume for keywords that match the job opening. So, be sure to include some good keywords in your resume.",
    "resumeBuildingBulletsIntro": "In terms of what to put on your resume for Software Engineering positions, here is a general outline:",
    "resumeBuildingBullet1": "Name, Email, Phone Number",
    "resumeBuildingBullet2": "Education",
    "resumeBuildingBullet3": "Skills",
    "resumeBuildingBullet4": "Experience",
    "resumeBuildingBullet5": "Projects",
    "resumeBuildingBullet6": "Activities and Achievements",
    "resumeBuilding4": "I have attached my resume here for reference, so it would be helpful for you if you follow along my resume for the next explanation segment.",
    "resumeBuilding5": "Name, email and phone number are rather self-explanatory.  Regarding Education, it should at least have your college/university name, major (Computer Science or similar variation) start and end date in month/year format (expected graduation month/year if ongoing).  Some more optional fields are classes you took that are relevant to Computer Science and your overall GPA at this institution.",
    "resumeBuilding6": "The Skills section is where you can show off your tech skills and software/tools you're good at, like coding languages such as java, python, and frameworks such as React (which is a javascript framework) or Apache Camel (an open-source integration framework). Personally, I break this down into sub-sections like Proficient, Intermediate, and Beginner to clearly communicate my skill level. If you're really good at a specific language or tool, put it in the proficient section. But if you don't want to overstate your skills and make it clear that you're still learning, then you should put it in beginner or intermediate.",
    "resumeBuilding7": "Now, when it comes to the Experience and Project sections, the line can be kind of blurry. Internships and other part-time/full-time jobs would go under the Experience section for sure.  And usually, stuff like building software as part of a club or doing research on a computer science topic could go in the Experience section as well. But, if you're building software on your own or as part of a group, or doing some kind of research project, you could also put it in the Project section. You might have to use your judgement to place your experiences and projects appropriately. But not to worry, because there’s no right or wrong answer for this!",
    "resumeBuilding8": "Last but not least, for the Extra-curricular Activities and Achievements section, use it to show off any cool CS activities or achievements both in and out of class. For example, something like you won first place in a class project competition, got some  prize in a hackathon, or took part in some CS-related talk/panel discussions. Let them know!",

    "codingQuestionsSubtitle": "Coding Questions",
    "codingQuestions1": "Coding questions are the main type of assessment you would face in any software engineer interview. It's like doing math problems, but you'll be using data structures and algorithms instead. These data structures are like building blocks (think arrays, lists, trees, etc.) and algorithms are like problem-solving tools (for example, sorting algorithms, tree and graph search algorithms, etc.). We call these interview coding questions Leetcode Problems or Leetcode-style questions. You can find them on Leetcode.com and other online platforms that help us practice for interviews. Some companies even take questions straight from Leetcode, while others put their own spin on similar questions.",
    "codingQuestionsBullets1Intro": "Coding questions vary in difficulty as well as categories.  Difficulty comes in easy, medium, hard and the categories are usually based on different data structures or the algorithm used.  Some examples of the categories are:",
    "codingQuestionsBullet11": "String (Data Structure)",
    "codingQuestionsBullet12": "Array (Data Structure)",
    "codingQuestionsBullet13": "HashMap (Data Structure)",
    "codingQuestionsBullet14": "Tree (Data Structure)",
    "codingQuestionsBullet15": "Graph (Data Structure)",
    "codingQuestionsBullet16": "Dynamic Programming (Algorithm)",
    "codingQuestionsBullet17": "Binary Search (Algorithm)",
    "codingQuestions2": "When it comes to practicing coding questions, start with the easy ones first. Once you feel comfortable with the easy questions in a particular category, give a few medium ones in that category a shot. Once you're feeling good about those medium questions, go for the hard ones in the same category. Going in this order of difficulty and, more importantly, category can be really helpful, instead of randomly doing easy questions, and attempting medium or hard questions. The harder questions usually build off of an idea from an easier question, so once you've got a good grasp on the concept from the easier question, if the harder questions, you'll start noticing patterns and be able to apply what you've learned so far to the harder question.",
    "codingQuestions3": "Apart from Leetcode, there are actually a bunch of other options out there that offer practice questions in a coding environment similar to Leetcode. Some of these even go a step further and provide review materials like slides, videos, and code examples for data structures and algorithms. And if you really want to get some practice in, there are even services that let you do mock interviews online with a real person pretending to be your interviewer! Here are just a few of the options available:",
    "codingQuestionsBullet21": "GeekForGeeks (To learn data structures and algorithms)",
    "codingQuestionsBullet22": "Cracking the Coding Interview (Popular book for beginners)",
    "codingQuestionsBullet23": "AlgoExpert, HackerRank, Codility, Interview Cake (Like Leetcode with additional features/services)",

    "interviewSubtitle": "Interview Structure and Practice",
    "interviewBullets1Intro": "For the software engineering interview itself, there are different types of interview rounds you will face:",
    "interviewBullet1a": "Technical Interview",
    "interviewBullet1ai": "Online Technical Coding Assessment",
    "interviewBullet1aii": "Technical Phone/Video Interview",
    "interviewBullet1aiii": "Technical On-site Interview",
    "interviewBullet1b": "Behavioral Interview",
    "interview1": "When it comes to interviews, there are two main types: Technical and Behavioral. But most of the time you're gonna get hit with all the technical questions first. They want to see your coding and problem solving skills first. Then, as you move on to the next rounds, they'll start asking you all the behavioral questions to see if you're a good fit for the company's culture.",
    "interview2": "So here's the deal with technical interviews. After companies review your resume, the first step in the interview process is an online coding challenge/assessment. Think of it as a timed take-home quiz from one of your classes. Basically, if you pass the resume screening stage, they'll shoot you an email with a link to the challenge. Click the link and you'll be taken to a Leetcode-like platform where you can see the question(s) and an area to write the code. Sometimes companies only include one question, but other times they throw in two. There are also cases where companies skip this stage altogether and invite you straight to a live interview round.",
    "interview3": "So, at this point, you'll either have a phone interview or a video call interview. During the interview, you'll need to open a link that the interviewer sends you to go to a coding platform they've chosen. It could be a simple online editor or even a Google doc. They may ask you 1 or 2 questions in this round. For an intern position, the questions are usually easy Leetcode-style questions, but if you're interviewing for a big well-known company, there's a chance you might face a medium-level question. For a full-time position, you'll likely face mostly medium questions, but there's also a chance you could face a hard question.",
    "interview4": "If you advance to the next round, chances are you'll have to do an on-site interview. But ever since Covid, it's usually done through a video call. Before, it was actually conducted on-site, where you'd be asked to go to the company branch you're applying for. It can range from one to multiple sessions. For instance, in a Google interview I had, I had to go through 3 rounds of technical coding interview and one behavioral interview (which I'll talk about in a sec) all in the same day, with 30 minutes to an hour in between each session. Now, for this round, you usually only get one coding question per session, and it's usually a bit harder than the previous round.",
    "interview5": "In these tech coding rounds, your interviewer will give you a problem to solve. Sometimes they'll leave it a bit open-ended to see how you tackle real-world problems where the scenarios aren't as clear-cut as in tests. You might not know everything or be totally sure, so make sure you pay attention to the details and actively ask questions. They can leave out information on purpose, so you can ask for clarification or try to get more info from your interviewer to fill in any gaps. When you're brainstorming solutions, make sure to talk through your thought process so your interviewer can understand how you're thinking about the problem and how you're coming up with your solution. If you get stuck, don't be afraid to ask for a hint. Ideally being able to solve the problem without any help is ideal, but sometimes it’s better to use the interviewer's hint to advance your thought process and arrive at the best solution. After brainstorming, you can start coding your solution. Keep talking as you code to make sure your interviewer is following along. And finally, remember to test your code; try your code in a normal common scenario, and then try out some uncommon corner cases to ensure that your code covers all cases.",
    "interview6": "Behavioral Interview is usually done on the same day as the on-site interview, rather than being a separate thing. It's not like the technical interview where you have to do coding or anything. Instead, the interviewer just asks you general questions about yourself to get a sense of your personality, communication style, and how you work with others. They might ask about how you handle conflicts too. Here are some examples of the kinds of questions they might ask:",
    "interviewHighlight1": "Tell me about a time you and your teammates differed in opinion and how you worked to resolve it.",
    "interviewHighlight2": "What is the most challenging part of your current job(or a particular project)?",
    "interviewHighlight3": "What is something that you had to push for in a team project?",
    "interview7": "The questions are open-ended and it can become more like a conversation.  So in this interview, try to be more relaxed.  You can talk with your interviewer in a friendly yet professional manner, much like having a chat with your co-worker.  At the same time, there are a few things to keep in mind.  There are certain skills or traits that you want to show to your interviewer:",
    "interviewBullet21": "assertive body language or leadership qualities",
    "interviewBullet22": "a positive and friendly attitude",
    "interviewBullet23": "persistence in solving problems (more relating to coding projects and problems)",
    "interviewBullet24": "your work ethics",
    "interviewBullet25": "how you adopt your target company’s values",
    "interview8": "The last point is important too.  You definitely wanna know about the company you're applying to, especially since this is usually the last stage. So, research things like the company's mission, vision, products, and core values. That way, during the behavioral interview, when you're chatting with the interviewer, you can ask some questions about the company's culture and what they do. This'll show that you really care about their work. Plus, you'll be able to use the company's values to help you answer the interviewer's questions and present yourself in the best way possible.",

    "jobSubtitle": "Job Hunt / Job Application",
    "job1": "If you're new to job-hunting, my advice would be to apply for as many job openings as you can. Don't worry if you don't meet all the requirements listed in the job description, especially since the tech industry can sometimes ask for a lot. Even if you only partially fit what they're looking for, they might still want to interview you because they value the skills you bring to the table. This is especially true for students looking for their first internships, so don't be too discouraged if you don't check all the boxes!",
    "job2": "One of the reasons you want to apply for many job openings is to increase your chances of getting an interview. It's just a numbers game. Another reason is to aim for several interviews so that you can get more experience talking to interviewers and solving problems. When you're practicing coding on your own, you're solving problems in your head before you dive into the code. But, as I mentioned earlier, the actual interview is different. You need to communicate with the interviewer, ask questions, think out loud, and explain your reasoning. With multiple interviews, you can accumulate experience and learn more about what to do and what not to do. A third reason is compensation negotiation. When multiple companies are interviewing you and you make them aware of this, you become more desirable. If they want to offer you a job based on your interview performance, you'll be in a better position to negotiate your compensation and choose the best offer. However, there is one caveat to this approach. If you have a dream company or set of companies you want to work for, it might be best to avoid starting with them. If you're a beginner at the interview process, chances are you're not yet good enough to pass their interviews. And if they reject you, they usually won't let you apply for their positions again for another 6 months to a year. So, if you go for your top companies right away, you'll end up using them as stepping stones in your job hunt rather than the ultimate goal.",
    "jobBulletsIntro": "Now that you know to keep applying, where do you go to apply? Where do you even start? I’ll list out and explain multiple pathways you could take, all varying according to time, effort and effectiveness.  From what I have observed and experienced, there are 4 major pathways: ",
    "jobBullet1": "Online Job Application",
    "jobBullet2": "School Career Fair",
    "jobBullet3": "Recruiting Agencies/Websites",
    "jobBullet4": "Employee Referral",
    "job3": "Online Job Application is pretty straightforward. It’s usually the first thing we think of when we want to apply for jobs. You just have to go through job postings online and submit your application online. Easy! You can do it through LinkedIn, other job boards, or directly through the company’s career page. It’s super convenient because you don’t have to leave your home and you can apply to a ton of companies. But, let’s be real, it’s not the best way to get a response from recruiters. There are hundreds or even thousands of applicants for each position, and your application is just one of them. Plus, most of the time, an automated program filters out the best applicants based on keywords and other top-secret factors that I personally don’t know. Long story short: there’s a lower chance that your application will get the attention it deserves from the recruiter.",
    "job4": "The second pathway, is to join career fairs at school.  I say career fairs at school because that’s what I’m most familiar with, but there are also a few career fairs out there for people who are not in school, or if you are an alumni of a school, you could potentially join your alma mater’s career fair to try to land a job interview.  I'm talking about the ones where companies come together onto a school premise looking for fresh talent to fill internships and full-time positions.  At these events, you can walk around and chat with recruiters from different companies, ask them questions, and drop off your resume. It's a chance to make a real connection instead of just being a name on a piece of paper or a screen. So don't be shy -- put yourself out there and tell your story!",
    "job5": "Now the third option is the one I’m least familiar with: Recruiting Agencies/Websites.  If you are a busy person, this could be suitable for you.  Job hunting can be pretty time-consuming with filling out the applications, networking and honing your interviewing skills.  Luckily, if you're feeling overwhelmed, you can always turn to recruiting agencies or websites.  All you have to do is put in your information, such as your background, qualifications, skills and preference, they can cross-reference your data against thousands of job postings they have in the database and present them to you for quick application.  Some of these agencies even have connections with specific companies, which means you'll have a better shot at getting an interview than if you applied on your own. Of course, these partnerships might not be with the biggest or fanciest companies out there, and there might be a fee involved - either a flat upfront charge or a percentage of your salary if you land the job.  Either way, this is still a good option when you’re a busy person who needs a little bit of a higher chance of landing an interview compared to submitting online applications on your own.",
    "job6": "Last but not least, one of the most effective ways to land a job interview is to secure employee referrals.  This is when a current employee of your desired company refers you to their company and vouch for you that you would be a good candidate for a position there. Some folks just jump right into it and ask for a referral right off the bat, but it's probably better to make a real connection first. This does work sometimes, but maybe not always since the employees being approached might want more of a genuine connection and submit a sincere referral for you rather than them feeling like a tool for you to use to land a job interview.  That way, the employee feels like they can give a genuine referral and not just be a tool for you to get the job. Plus, companies really value their employees' opinions, so they're more likely to give your application a good look if it comes with a referral. When you're asking for a referral, make sure to share your resume, background, and any social or professional links so the employee can get to know you and give a personalized recommendation. Good luck out there!"  
  },
  "conclusion": "Overall, I'm hoping that the stuff and tips I shared here will help you out in starting and cruising through your job hunting journey. It's best to give yourself a head start on interview prep, whether it's by starting with your resume, taking on a cool project to add to your resume, or practicing Leetcode questions and doing mock interviews. With solid prep, you'll be feeling pretty confident in yourself and your abilities when you're going for that actual job interview."
}